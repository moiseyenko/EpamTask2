!PARAGRAPH: It is necessary to know that when using Serializable, deserialization occurs as follows: the object is allocated memory. After that its fields are filled with values ??from the stream.

It is necessary to know that when using Serializable, deserialization occurs as follows: the object is allocated memory.
It 
I
t
 
is 
i
s
 
necessary 
n
e
c
e
s
s
a
r
y
 
to 
t
o
 
know 
k
n
o
w
 
that 
t
h
a
t
 
when 
w
h
e
n
 
using 
u
s
i
n
g
 
Serializable, 
S
e
r
i
a
l
i
z
a
b
l
e
,
 
deserialization 
d
e
s
e
r
i
a
l
i
z
a
t
i
o
n
 
occurs 
o
c
c
u
r
s
 
as 
a
s
 
follows: 
f
o
l
l
o
w
s
:
 
the 
t
h
e
 
object 
o
b
j
e
c
t
 
is 
i
s
 
allocated 
a
l
l
o
c
a
t
e
d
 
memory.
m
e
m
o
r
y
.
 After that its fields are filled with values ?
 
 
After 
A
f
t
e
r
 
that 
t
h
a
t
 
its 
i
t
s
 
fields 
f
i
e
l
d
s
 
are 
a
r
e
 
filled 
f
i
l
l
e
d
 
with 
w
i
t
h
 
values 
v
a
l
u
e
s
 
?
?
?
?
?
from the stream.

from 
f
r
o
m
 
the 
t
h
e
 
stream.

s
t
r
e
a
m
.


!PARAGRAPH: The object's constructor is not called.

The object's constructor is not called.

The 
T
h
e
 
object's 
o
b
j
e
c
t
'
s
 
constructor 
c
o
n
s
t
r
u
c
t
o
r
 
is 
i
s
 
not 
n
o
t
 
called.

c
a
l
l
e
d
.


/* # 6 # serializable class # Student.java */
package by.bsu.serial;
import java.io.Serializable;
public class Student implements Serializable {
 protected static String faculty;
 private String name;
 private int id;
 private transient String password;
 private static final long serialVersionUID = 1L;
 / * the value of the serialVersionUID field for the class will be explained below * /
 public Student (String nameOfFaculty, String name, int id, String password) {
 faculty = nameOfFaculty;
this.name = name;
this.id = id;
{}
{}
this.password = password;
 }
 public String toString () {
 return "\ nfaculty" + faculty + "\ nname" + name + "\ nID" + id + "\ npassword" + password;
 }
}


!PARAGRAPH: If the class field is a reference to another type, then it is necessary. That the aggregated type also implements the Serializable interface, otherwise when you try to serialize an object of this class, the NotSerializableException will be thrown.

If the class field is a reference to another type, then it is necessary.
If 
I
f
 
the 
t
h
e
 
class 
c
l
a
s
s
 
field 
f
i
e
l
d
 
is 
i
s
 
a 
a
 
reference 
r
e
f
e
r
e
n
c
e
 
to 
t
o
 
another 
a
n
o
t
h
e
r
 
type, 
t
y
p
e
,
 
then 
t
h
e
n
 
it 
i
t
 
is 
i
s
 
necessary.
n
e
c
e
s
s
a
r
y
.
 That the aggregated type also implements the Serializable interface, otherwise when you try to serialize an object of this class, the NotSerializableException will be thrown.

 
 
That 
T
h
a
t
 
the 
t
h
e
 
aggregated 
a
g
g
r
e
g
a
t
e
d
 
type 
t
y
p
e
 
also 
a
l
s
o
 
implements 
i
m
p
l
e
m
e
n
t
s
 
the 
t
h
e
 
Serializable 
S
e
r
i
a
l
i
z
a
b
l
e
 
interface, 
i
n
t
e
r
f
a
c
e
,
 
otherwise 
o
t
h
e
r
w
i
s
e
 
when 
w
h
e
n
 
you 
y
o
u
 
try 
t
r
y
 
to 
t
o
 
serialize 
s
e
r
i
a
l
i
z
e
 
an 
a
n
 
object 
o
b
j
e
c
t
 
of 
o
f
 
this 
t
h
i
s
 
class, 
c
l
a
s
s
,
 
the 
t
h
e
 
NotSerializableException 
N
o
t
S
e
r
i
a
l
i
z
a
b
l
e
E
x
c
e
p
t
i
o
n
 
will 
w
i
l
l
 
be 
b
e
 
thrown.

t
h
r
o
w
n
.


!PARAGRAPH: In the second case, the smallest number of symbols is selected for the first group, since a weak match is used.

In the second case, the smallest number of symbols is selected for the first group, since a weak match is used.

In 
I
n
 
the 
t
h
e
 
second 
s
e
c
o
n
d
 
case, 
c
a
s
e
,
 
the 
t
h
e
 
smallest 
s
m
a
l
l
e
s
t
 
number 
n
u
m
b
e
r
 
of 
o
f
 
symbols 
s
y
m
b
o
l
s
 
is 
i
s
 
selected 
s
e
l
e
c
t
e
d
 
for 
f
o
r
 
the 
t
h
e
 
first 
f
i
r
s
t
 
group, 
g
r
o
u
p
,
 
since 
s
i
n
c
e
 
a 
a
 
weak 
w
e
a
k
 
match 
m
a
t
c
h
 
is 
i
s
 
used.

u
s
e
d
.


/* # 12 # extracting information from the resource file and changing the locale #
ResourceManagerRun.java */
package by.bsu.resource;
import java.util.Locale;
public class ResourceManagerRun {
public static void main (String [] args) {
{
{
}
}
 ResourceManager manager = ResourceManager.INSTANCE;
 System.out.println (manager.getString ("str1"));
 manager.changeResource (new Locale ("be", "BY"));
 System.out.println (manager.getString ("str1"));
}
}


!PARAGRAPH: Qualitatively developed application usually does not contain literals of type String.

Qualitatively developed application usually does not contain literals of type String.

Qualitatively 
Q
u
a
l
i
t
a
t
i
v
e
l
y
 
developed 
d
e
v
e
l
o
p
e
d
 
application 
a
p
p
l
i
c
a
t
i
o
n
 
usually 
u
s
u
a
l
l
y
 
does 
d
o
e
s
 
not 
n
o
t
 
contain 
c
o
n
t
a
i
n
 
literals 
l
i
t
e
r
a
l
s
 
of 
o
f
 
type 
t
y
p
e
 
String.

S
t
r
i
n
g
.


!PARAGRAPH: All necessary messages are stored outside the system, in particular, in properties files.

All necessary messages are stored outside the system, in particular, in properties files.

All 
A
l
l
 
necessary 
n
e
c
e
s
s
a
r
y
 
messages 
m
e
s
s
a
g
e
s
 
are 
a
r
e
 
stored 
s
t
o
r
e
d
 
outside 
o
u
t
s
i
d
e
 
the 
t
h
e
 
system, 
s
y
s
t
e
m
,
 
in 
i
n
 
particular, 
p
a
r
t
i
c
u
l
a
r
,
 
in 
i
n
 
properties 
p
r
o
p
e
r
t
i
e
s
 
files.

f
i
l
e
s
.


!PARAGRAPH: That allows without recompiling the code painlessly to change any message or information stored outside the system classes.

That allows without recompiling the code painlessly to change any message or information stored outside the system classes.

That 
T
h
a
t
 
allows 
a
l
l
o
w
s
 
without 
w
i
t
h
o
u
t
 
recompiling 
r
e
c
o
m
p
i
l
i
n
g
 
the 
t
h
e
 
code 
c
o
d
e
 
painlessly 
p
a
i
n
l
e
s
s
l
y
 
to 
t
o
 
change 
c
h
a
n
g
e
 
any 
a
n
y
 
message 
m
e
s
s
a
g
e
 
or 
o
r
 
information 
i
n
f
o
r
m
a
t
i
o
n
 
stored 
s
t
o
r
e
d
 
outside 
o
u
t
s
i
d
e
 
the 
t
h
e
 
system 
s
y
s
t
e
m
 
classes.

c
l
a
s
s
e
s
.


It 
is 
necessary 
to 
know 
that 
when 
using 
Serializable, 
deserialization 
occurs 
as 
follows: 
the 
object 
is 
allocated 
memory. 
After 
that 
its 
fields 
are 
filled 
with 
values 
??from 
the 
stream.

The 
object's 
constructor 
is 
not 
called.

/* 
# 
6 
# 
serializable 
class 
# 
Student.java 
*/

package 
by.bsu.serial;

import 
java.io.Serializable;

public 
class 
Student 
implements 
Serializable 
{

 protected 
static 
String 
faculty;

 private 
String 
name;

 private 
int 
id;

 private 
transient 
String 
password;

 private 
static 
final 
long 
serialVersionUID 
= 
1L;

 / 
* 
the 
value 
of 
the 
serialVersionUID 
field 
for 
the 
class 
will 
be 
explained 
below 
* 
/

 public 
Student 
String 
nameOfFaculty, 
String 
name, 
int 
id, 
String 
 
{

 faculty 
= 
nameOfFaculty;

this.name 
= 
name;

this.id 
= 
id;

{}

{}

this.password 
= 
password;

 }

 public 
String 
toString 
 
{

 return 
"\ 
nfaculty" 
+ 
faculty 
+ 
"\ 
nname" 
+ 
name 
+ 
"\ 
nID" 
+ 
id 
+ 
"\ 
npassword" 
+ 
password;

 }

}



If 
the 
class 
field 
is 
a 
reference 
to 
another 
type, 
then 
it 
is 
necessary. 
That 
the 
aggregated 
type 
also 
implements 
the 
Serializable 
interface, 
otherwise 
when 
you 
try 
to 
serialize 
an 
object 
of 
this 
class, 
the 
NotSerializableException 
will 
be 
thrown.

In 
the 
second 
case, 
the 
smallest 
number 
of 
symbols 
is 
selected 
for 
the 
first 
group, 
since 
a 
weak 
match 
is 
used.

/* 
# 
12 
# 
extracting 
information 
from 
the 
resource 
file 
and 
changing 
the 
locale 
#

ResourceManagerRun.java 
*/

package 
by.bsu.resource;

import 
java.util.Locale;

public 
class 
ResourceManagerRun 
{

public 
static 
void 
main 
String 
[] 
 
{

{

{

}

}

 ResourceManager 
manager 
= 
ResourceManager.INSTANCE;

 System.out.println 
manager.getString 
;

 manager.changeResource 
new 
Locale 
"be", 
;

 System.out.println 
manager.getString 
;

}

}



Qualitatively 
developed 
application 
usually 
does 
not 
contain 
literals 
of 
type 
String.

All 
necessary 
messages 
are 
stored 
outside 
the 
system, 
in 
particular, 
in 
properties 
files.

That 
allows 
without 
recompiling 
the 
code 
painlessly 
to 
change 
any 
message 
or 
information 
stored 
outside 
the 
system 
classes.

